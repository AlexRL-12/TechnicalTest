// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TechnicalTest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241015170518_InitialCreateTest")]
    partial class InitialCreateTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentPosition")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentPosition = 2,
                            DepartmentId = 1,
                            Name = "Alice Johnson",
                            PasswordHash = "hash_for_alice",
                            Position = "Software Engineer",
                            Salary = 60000m
                        },
                        new
                        {
                            Id = 2,
                            CurrentPosition = 1,
                            DepartmentId = 2,
                            Name = "Bob Smith",
                            PasswordHash = "hash_for_bob",
                            Position = "HR Specialist",
                            Salary = 50000m
                        },
                        new
                        {
                            Id = 3,
                            CurrentPosition = 3,
                            DepartmentId = 3,
                            Name = "Charlie Brown",
                            PasswordHash = "hash_for_charlie",
                            Position = "Financial Analyst",
                            Salary = 80000m
                        },
                        new
                        {
                            Id = 4,
                            CurrentPosition = 1,
                            DepartmentId = 1,
                            Name = "Diana Prince",
                            PasswordHash = "hash_for_diana",
                            Position = "Project Manager",
                            Salary = 70000m
                        });
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.HasKey("EmployeesId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("EmployeeProject");

                    b.HasData(
                        new
                        {
                            EmployeesId = 1,
                            ProjectsId = 1
                        },
                        new
                        {
                            EmployeesId = 1,
                            ProjectsId = 2
                        },
                        new
                        {
                            EmployeesId = 2,
                            ProjectsId = 3
                        },
                        new
                        {
                            EmployeesId = 3,
                            ProjectsId = 1
                        });
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Project A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Project B"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Project C"
                        });
                });

            modelBuilder.Entity("TechnicalTest.Models.PositionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PositionHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 10, 15, 12, 5, 17, 990, DateTimeKind.Local).AddTicks(644),
                            Position = "Junior Developer",
                            StartDate = new DateTime(2022, 10, 15, 12, 5, 17, 990, DateTimeKind.Local).AddTicks(622)
                        },
                        new
                        {
                            Id = 2,
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 10, 15, 12, 5, 17, 990, DateTimeKind.Local).AddTicks(650),
                            Position = "Recruiter",
                            StartDate = new DateTime(2021, 10, 15, 12, 5, 17, 990, DateTimeKind.Local).AddTicks(649)
                        },
                        new
                        {
                            Id = 3,
                            EmployeeId = 3,
                            EndDate = new DateTime(2021, 10, 15, 12, 5, 17, 990, DateTimeKind.Local).AddTicks(654),
                            Position = "Intern",
                            StartDate = new DateTime(2020, 10, 15, 12, 5, 17, 990, DateTimeKind.Local).AddTicks(651)
                        });
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Department", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TechnicalTest.Models.PositionHistory", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("PositionHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("PositionHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
